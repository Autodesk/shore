local stage = import '../stage.libsonnet';

local tests = [
  stage.Stage { name: 'my-stage', type: 'deploy' },
  stage.Parallel { parallelStages: {} },
  stage.StageEnabled { expression: 'true == true' },
  stage.FindArtifactFromExecutionStage { name: 'my-find-artifact-stage', application: 'my-spinnaker-app', pipeline: 'my-pipeline', expectedArtifact: 'my-spinnaker-artifact' },
  stage.BakeStage { name: 'my-bake-stage', package: 'potato', regions: ['us-west-2'], amiName: 'my-ami', templateFileName: 'template.json' },
  stage.FindImageStage { name: 'my-find-image-stage', cloudProvider: 'aws', cloudProviderType: 'aws' },
  stage.FindAmiImageStage { name: 'my-find-ami-stage', packageName: 'potato-crate', regions: ['us-west-2'] },
  stage.FindContainerImageStage { name: 'my-find-container-stage', imageLabelOrSha: 'hello-world:latest' },
  stage.ManualJudgmentStage { name: 'my-manual-judgment-stage', instructions: 'fry the potatoes' },
  stage.DeployStage { name: 'my-deploy-stage', clusters: [] },
  stage.PipelineStage { name: 'my-pipeline-stage', application: 'my-spinnaker-app', pipeline: 'my-pipeline', pipelineJSON:: {} },
  stage.NestedPipelineStage { name: 'my-nested-pipeline-stage', Parent: { application: 'my-spinnaker-app' }, Pipeline: {} },
  stage.WaitStage { name: 'my-wait-stage' },
  stage.WebhookStage { name: 'my-webhook-stage', url: 'http://localhost/potato', method: 'GET' },
  stage.RunKubeJobStage { name: 'my-run-kube-job-stage', application: 'my-spinnaker-app', credentials: 'kube-account', account: 'kube-account' },
  stage.CheckPreconditionsStage { name: 'my-check-precondition-stge', preconditions: [] },
  stage.RollbackClusterStage { name: 'my-rollback-cluster-stage', cluster: 'potato-cluster', credentials: 'creds', moniker: 'potatoes-dev', regions: ['us-west-2'] },
  stage.DestroyServerGroupStage { name: 'my-destroy-server-group-stage', cluster: 'potato-cluster', credentials: 'creds', regions: ['us-west-2'], target: 'current_asg_dynamic', cloudProvider: 'aws', cloudProviderType: 'aws' },
];

local assertions = [
  {
    name: 'my-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'deploy',
  },
  {
    parallelStages: {},
  },
  {
    comments: 'This stage only runs if the expression evaluates to true.',
    stageEnabled: {
      expression: 'true == true',
      type: 'expression',
    },
  },
  {
    application: 'my-spinnaker-app',
    executionOptions: {
      successful: true,
    },
    expectedArtifact: 'my-spinnaker-artifact',
    name: 'my-find-artifact-stage',
    pipeline: 'my-pipeline',
    refId: '',
    requisiteStageRefIds: [],
    type: 'findArtifactFromExecution',
  },
  {
    amiName: 'my-ami',
    baseAmi: '',
    baseLabel: 'release',
    baseOs: 'ubuntu',
    cloudProviderType: 'aws',
    extendedAttributes: {},
    name: 'my-bake-stage',
    package: 'potato',
    rebake: false,
    refId: '',
    regions: [
      'us-west-2',
    ],
    requisiteStageRefIds: [],
    storeType: 'ebs',
    templateFileName: 'template.json',
    type: 'bake',
    vmType: 'hvm',
  },
  {
    cloudProvider: 'aws',
    cloudProviderType: 'aws',
    isNew: true,
    name: 'my-find-image-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'findImageFromTags',
  },
  {
    cloudProvider: 'aws',
    cloudProviderType: 'aws',
    isNew: true,
    name: 'my-find-ami-stage',
    packageName: 'potato-crate',
    refId: '',
    regions: [
      'us-west-2',
    ],
    requisiteStageRefIds: [],
    tags: {},
    type: 'findImageFromTags',
  },
  {
    cloudProvider: 'ecs',
    cloudProviderType: 'ecs',
    imageLabelOrSha: 'hello-world:latest',
    isNew: true,
    name: 'my-find-container-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'findImageFromTags',
  },
  {
    instructions: 'fry the potatoes',
    judgmentInputs: [],
    name: 'my-manual-judgment-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'manualJudgment',
  },
  {
    clusters: [],
    name: 'my-deploy-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'deploy',
  },
  {
    application: 'my-spinnaker-app',
    failPipeline: true,
    name: 'my-pipeline-stage',
    pipeline: 'my-pipeline',
    pipelineParameters: {},
    refId: '',
    requisiteStageRefIds: [],
    type: 'pipeline',
    waitForCompletion: true,
  },
  {
    application: 'my-spinnaker-app',
    failPipeline: true,
    name: 'my-nested-pipeline-stage',
    pipeline: {
      application: 'my-spinnaker-app',
    },
    pipelineParameters: {},
    refId: '',
    requisiteStageRefIds: [],
    type: 'pipeline',
    waitForCompletion: true,
  },
  {
    name: 'my-wait-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'wait',
    waitTime: 1,
  },
  {
    method: 'GET',
    name: 'my-webhook-stage',
    refId: '',
    requisiteStageRefIds: [],
    type: 'webhook',
    url: 'http://localhost/potato',
  },
  {
    account: 'kube-account',
    alias: 'runJob',
    application: 'my-spinnaker-app',
    cloudProvider: 'kubernetes',
    consumeArtifactSource: 'none',
    credentials: 'kube-account',
    manifest: {},
    manifestArtifact: {},
    name: 'my-run-kube-job-stage',
    refId: '',
    requisiteStageRefIds: [],
    source: 'text',
    type: 'runJobManifest',
  },
  {
    name: 'my-check-precondition-stge',
    preconditions: [],
    refId: '',
    requisiteStageRefIds: 'none',
    type: 'checkPreconditions',
  },
  {
    cloudProvider: 'aws',
    cloudProviderType: 'aws',
    cluster: 'potato-cluster',
    credentials: 'creds',
    moniker: 'potatoes-dev',
    name: 'my-rollback-cluster-stage',
    refId: '',
    regions: [
      'us-west-2',
    ],
    requisiteStageRefIds: [],
    targetHealthyRollbackPercentage: 100,
    type: 'rollbackCluster',
  },
  {
    cloudProvider: 'aws',
    cloudProviderType: 'aws',
    cluster: 'potato-cluster',
    credentials: 'creds',
    name: 'my-destroy-server-group-stage',
    refId: '',
    regions: [
      'us-west-2',
    ],
    requisiteStageRefIds: [],
    target: 'current_asg_dynamic',
    type: 'destroyServerGroup',
  },
];

{
  pass: tests == assertions,
  tests: tests,
  assertions: assertions,
}
